

Problem:
	Input: User input search string into the form
	Output: The web page shows a list of all the chapter titles (with links) that include that search term.

	Rules:
		# does casing matter? I don't know.

Examples:
	# Search(Cat)
		A Cat in the Hat
		A Man Drains the Pain --> both include the word (Cat)

Data Structures:
	# Create a hash to store the chapter titles (what will be viewed) as keys
	# and the chapter words as the values
	# @contents is an array of the titles
	# Use Dir class to get the contents of each chapter and put them in the value

Algorithm:
	# HELPER create hash
	# iterate through @contents with each with index
	#  take the current element in contents and make it the key
		# for the value at the current element in the directory.

	# HELPER select keys
		# Take the query search in the params hash
		# if the value in the chapters_hash includes the search, select that key/value pair
		# take the selections and return the keys. 	

	# View Template Search:
		# Create a list of all the selected Titles. Each item in the list should also be a link.
		# Iterate through with each
		# need the number associated with the chapter. Shit! hahahha	

	# layout view and Home view
	# Create a search link in the Table of Contents list in layout / home	


	Problem 2: Upgraded Search
	
	# Input: search term
	# Output: 
		 # list of all the chapter titles that include the term and the LINK for that paragraph in the chapter
		 # The specific paragraph listed underneath.

	# Rules:
		# Use an id anchor in the chapter page to create an id that links to the specific paragraph.
		# Once you've found the correct paragraph(s), the chapter title should link to that.
		# if the search matches multiple terms in the same paragraph ("the", for example)
			# then the search should include each paragraph (only once) with the title repeated for each paragraph.

		Required Elements:
			# Id
			# number for index of title and for linking
			# paragraph	
		
	# Examples:
		# the
			# A Scandal in Bohemia (links to paragraph)
				# paragraph that includes the
			# A Scandal in Bohemia (links to paragraph)
				# paragraph that includes the
			# so on	

			# id => gives the anchor for the indicated paragraph
			# number gives the index for each chapter title and the link for each chapter
			# paragraph gives the actual paragraph text.

	# Data Structures:
		Array of hashes where every hash is a chapter containing id's as keys and paragraphs as values
		# [ chp1 {id1 => p1, id2 => p2, etc}, chp2 {id1 => p1, id2 => p2, etc}, etc ]

Algorithm:
	# Helper Create Paragraphs Array
		Array of hashes
		# Take the DIrectory children array for data from 0 to 11 indicies
		# Create an id = to 1
		# 

	# Select Query
		# Transform by selecting
		# iterate first with map, then the second level with select
		# select each paragraph that includes the query
		# iterate through this new array of arrays and take the index that current paragraph is at and create a
		# hash for the title.

	# Search.erb
		# Iterate over the array with an index
		# skip the element if it's an empty hash
		# if not, iterate over the hash. 
		# Take the element at that index for @content and make it the link in the list with the id as the anchor
		# under that, should be each paragraph in a sublist. For each paragraph, list the same
		# chapter as a link with the id for the paragraph.

	# Chapters.erb						